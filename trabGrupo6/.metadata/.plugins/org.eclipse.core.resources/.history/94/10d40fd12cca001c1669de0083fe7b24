package org.serratec.main;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

import org.serratec.classes.Dependente;
import org.serratec.classes.Funcionario;
import org.serratec.enums.Parentesco;
import org.serratec.exceptions.DependenteException;
import org.serratec.exceptions.FuncionarioException;

public class TesteFuncionario {

	public static void main(String[] args) {

		List<Funcionario> funcionariosGeral = new ArrayList<>();
		List<Dependente> dependentesGeral = new ArrayList<>();
		Set<Funcionario> funcionarios = new LinkedHashSet<>();
		Set<Dependente> dependentes = new LinkedHashSet<>();

		String arquivoEntrada;
		String arquivoSaida;
		Scanner sc = null;

		System.out.println("Digite o caminho do arquivo de entrada: ");
		Scanner sc1 = new Scanner(System.in);
		arquivoEntrada = sc1.next();

		System.out.println("\nDigite o caminho do arquivo de saída: ");
		Scanner sc2 = new Scanner(System.in);
		arquivoSaida = sc2.next();
		System.out.println();

		try {
			sc = new Scanner(new File(arquivoEntrada));

			while (sc.hasNextLine()) {
				String linhaEntrada = sc.nextLine();

				if (!linhaEntrada.isEmpty()) {
					String[] dadosLinhaFunc = linhaEntrada.split(";");

					String nomeFunc = dadosLinhaFunc[0];
					String cpfFunc = dadosLinhaFunc[1];
					LocalDate dataNascimentoFunc = LocalDate.parse(dadosLinhaFunc[2].toString(),
							DateTimeFormatter.BASIC_ISO_DATE);
					Double salarioBruto = Double.parseDouble(dadosLinhaFunc[3]);

					Funcionario funcionario = new Funcionario(nomeFunc, cpfFunc, dataNascimentoFunc, salarioBruto);

					funcionarios.add(funcionario);
					funcionariosGeral.add(funcionario);

					while (!linhaEntrada.isEmpty() && sc.hasNextLine()) {
						linhaEntrada = sc.nextLine();

						if (!linhaEntrada.isEmpty()) {
							String[] dadosLinhaDep = linhaEntrada.split(";");
							String nomeDep = dadosLinhaDep[0];
							String cpfDep = dadosLinhaDep[1];
							LocalDate dataNascimentoDep = LocalDate.parse(dadosLinhaDep[2].toString(),
									DateTimeFormatter.BASIC_ISO_DATE);
							String parentesco = dadosLinhaDep[3];

							try {
								parentesco = Parentesco.verificarParentesco(parentesco, nomeDep, cpfDep);

								Dependente dependente = new Dependente(nomeDep, cpfDep, dataNascimentoDep,
										Parentesco.valueOf(Parentesco.class, parentesco));

								dependentes.add(dependente);
								dependentesGeral.add(dependente);

								for (Dependente d : dependentes) {

									if (cpfDep.equals(d.getCpf()) && nomeDep.equals(d.getNome())) {
										funcionario.adicionarDependente(dependente);
									}
									if (cpfDep.equals(d.getCpf()) && nomeDep != d.getNome()) {
										throw new DependenteException(
												"Erro 201: Não foi possível cadastrar o(a) dependente: " + nomeDep
														+ " (CPF: " + cpfDep
														+ "). Verifique se os dados foram inseridos corretamente!");
									}
								}
							} catch (DependenteException e) {
								System.out.println(e.getMessage());
							}
						}
					}
				}
			}

//			for (Dependente geral : dependentesGeral) {
//				try {
//
//					for (Dependente unico : dependentes) {
//
//						if (geral.getCpf().equals(unico.getCpf()) && geral.getNome() != unico.getNome()) {
//							throw new DependenteException("Erro 201: Não foi possível cadastrar o(a) dependente: "
//									+ geral.getNome() + " (CPF: " + geral.getCpf()
//									+ "). Verifique se os dados foram inseridos corretamente!");
//						}
//					}
//				} catch (DependenteException e) {
//					System.out.println(e.getMessage());
//				}
//			}

			for (Funcionario geral : funcionariosGeral) {
				try {

					for (Funcionario unico : funcionarios) {

						if (geral.getCpf().equals(unico.getCpf()) && geral.getNome() != unico.getNome()) {
							throw new FuncionarioException("Erro 301: Não foi possível cadastrar o(a) funcionário(a): "
									+ geral.getNome() + " (CPF: " + geral.getCpf()
									+ "). Verifique se os dados foram inseridos corretamente!");
						}
					}
				} catch (FuncionarioException e) {
					System.out.println(e.getMessage());
				}
			}
			System.out.println("\nA leitura do arquivo \"" + arquivoEntrada + "\" foi efetuada com sucesso.");
		} catch (IOException e) {
			System.out.println("Erro 101: Não foi possível realizar a leitura do arquivo. O arquivo " + arquivoEntrada
					+ " não foi encontrado.");
		} finally {

			if (sc != null) {
				sc.close();
			}
		}

		for (Funcionario f : funcionarios) {
			f.calcularINSS();
			f.calcularIR();
			f.calcularSalarioLiq();

			System.out.println("\n" + f);
			System.out.println("Dependentes:");

			for (Dependente d : f.getDependentes()) {
				System.out.println(d);
			}
		}

		PrintWriter gv = null;
		DecimalFormat df = new DecimalFormat("0.00");

		try {
			gv = new PrintWriter(new FileWriter(arquivoSaida));

			for (Funcionario f : funcionarios) {
				String linhaSaida = f.getNome() + ";" + f.getCpf() + ";" + df.format(f.getDescontoINSS()) + ";"
						+ df.format(f.getDescontoIR()) + ";" + df.format(f.getSalarioLiq()) + "\n";
				gv.printf(linhaSaida);
			}
			System.out.println("\nA gravação do arquivo \"" + arquivoSaida + "\" foi efetuada com sucesso.");
		} catch (IOException e) {
			System.out.println("Erro 102: Não foi possível realizar a gravação do arquivo. O caminho " + arquivoSaida
					+ " não foi encontrado.");
		} finally {

			if (gv != null) {
				gv.close();
			}
		}

		sc1.close();
		sc2.close();

	}
}
